// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csnmessages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Csnmessages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CSNPCsnmessagesRoot

@implementation CSNPCsnmessagesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CSNPCsnmessagesRoot_FileDescriptor

static GPBFileDescriptor *CSNPCsnmessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                 objcPrefix:@"CSNP"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum CSNPAdInteractionKind

GPBEnumDescriptor *CSNPAdInteractionKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Tap\000";
    static const int32_t values[] = {
        CSNPAdInteractionKind_Tap,
    };
    static const char *extraTextFormatInfo = "\001\000\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CSNPAdInteractionKind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CSNPAdInteractionKind_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CSNPAdInteractionKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case CSNPAdInteractionKind_Tap:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CSNPStop

@implementation CSNPStop

@dynamic agencyId;
@dynamic routeId;
@dynamic stopId;

typedef struct CSNPStop__storage_ {
  uint32_t _has_storage_[1];
  NSString *agencyId;
  NSString *routeId;
  NSString *stopId;
} CSNPStop__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agencyId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPStop_FieldNumber_AgencyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPStop__storage_, agencyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routeId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPStop_FieldNumber_RouteId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPStop__storage_, routeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stopId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPStop_FieldNumber_StopId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPStop__storage_, stopId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPStop class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPStop__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPLocation

@implementation CSNPLocation

@dynamic lat;
@dynamic lon;

typedef struct CSNPLocation__storage_ {
  uint32_t _has_storage_[1];
  double lat;
  double lon;
} CSNPLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLocation_FieldNumber_Lat,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPLocation__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lon",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLocation_FieldNumber_Lon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPLocation__storage_, lon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPLocation class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPLocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPNativeAd

@implementation CSNPNativeAd

@dynamic requestId;
@dynamic icon;
@dynamic title;
@dynamic backgroundColor;
@dynamic secondaryHtml;
@dynamic hasLocation, location;

typedef struct CSNPNativeAd__storage_ {
  uint32_t _has_storage_[1];
  NSData *icon;
  NSString *title;
  NSString *backgroundColor;
  NSString *secondaryHtml;
  CSNPLocation *location;
  uint64_t requestId;
} CSNPNativeAd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPNativeAd_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = CSNPNativeAd_FieldNumber_Icon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = CSNPNativeAd_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundColor",
        .dataTypeSpecific.className = NULL,
        .number = CSNPNativeAd_FieldNumber_BackgroundColor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, backgroundColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secondaryHtml",
        .dataTypeSpecific.className = NULL,
        .number = CSNPNativeAd_FieldNumber_SecondaryHtml,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, secondaryHtml),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPLocation),
        .number = CSNPNativeAd_FieldNumber_Location,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPNativeAd class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPNativeAd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPStopAd

@implementation CSNPStopAd

@dynamic hasStop, stop;
@dynamic requestId;

typedef struct CSNPStopAd__storage_ {
  uint32_t _has_storage_[1];
  CSNPStop *stop;
  uint64_t requestId;
} CSNPStopAd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stop",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPStop),
        .number = CSNPStopAd_FieldNumber_Stop,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPStopAd__storage_, stop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPStopAd_FieldNumber_RequestId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPStopAd__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPStopAd class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPStopAd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPLocationAd

@implementation CSNPLocationAd

@dynamic hasLoc, loc;
@dynamic requestId;

typedef struct CSNPLocationAd__storage_ {
  uint32_t _has_storage_[1];
  CSNPLocation *loc;
  uint64_t requestId;
} CSNPLocationAd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loc",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPLocation),
        .number = CSNPLocationAd_FieldNumber_Loc,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPLocationAd__storage_, loc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLocationAd_FieldNumber_RequestId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPLocationAd__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPLocationAd class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPLocationAd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdRequest

@implementation CSNPAdRequest

@dynamic adUnit;
@dynamic hasDeviceId, deviceId;
@dynamic timezone;
@dynamic hasLocation, location;
@dynamic stopsArray, stopsArray_Count;

typedef struct CSNPAdRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *adUnit;
  CSNPDeviceID *deviceId;
  NSString *timezone;
  CSNPLocation *location;
  NSMutableArray *stopsArray;
} CSNPAdRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adUnit",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdRequest_FieldNumber_AdUnit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, adUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPDeviceID),
        .number = CSNPAdRequest_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timezone",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdRequest_FieldNumber_Timezone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, timezone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPLocation),
        .number = CSNPAdRequest_FieldNumber_Location,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stopsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPStop),
        .number = CSNPAdRequest_FieldNumber_StopsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, stopsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdRequest class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdResponse

@implementation CSNPAdResponse

@dynamic locationAdsArray, locationAdsArray_Count;
@dynamic stopAdsArray, stopAdsArray_Count;
@dynamic ads, ads_Count;

typedef struct CSNPAdResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *locationAdsArray;
  NSMutableArray *stopAdsArray;
  GPBUInt64ObjectDictionary *ads;
} CSNPAdResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationAdsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPLocationAd),
        .number = CSNPAdResponse_FieldNumber_LocationAdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdResponse__storage_, locationAdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stopAdsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPStopAd),
        .number = CSNPAdResponse_FieldNumber_StopAdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdResponse__storage_, stopAdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ads",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPNativeAd),
        .number = CSNPAdResponse_FieldNumber_Ads,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdResponse__storage_, ads),
        .flags = GPBFieldMapKeyUInt64,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdResponse class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPDeviceID

@implementation CSNPDeviceID

@dynamic deviceIdType;
@dynamic deviceId;

typedef struct CSNPDeviceID__storage_ {
  uint32_t _has_storage_[1];
  CSNPDeviceID_Type deviceIdType;
  NSString *deviceId;
} CSNPDeviceID__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceIdType",
        .dataTypeSpecific.enumDescFunc = CSNPDeviceID_Type_EnumDescriptor,
        .number = CSNPDeviceID_FieldNumber_DeviceIdType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPDeviceID__storage_, deviceIdType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPDeviceID_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPDeviceID__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPDeviceID class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPDeviceID__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CSNPDeviceID_DeviceIdType_RawValue(CSNPDeviceID *message) {
  GPBDescriptor *descriptor = [CSNPDeviceID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPDeviceID_FieldNumber_DeviceIdType];
  return GPBGetMessageInt32Field(message, field);
}

void SetCSNPDeviceID_DeviceIdType_RawValue(CSNPDeviceID *message, int32_t value) {
  GPBDescriptor *descriptor = [CSNPDeviceID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPDeviceID_FieldNumber_DeviceIdType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CSNPDeviceID_Type

GPBEnumDescriptor *CSNPDeviceID_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Idfa\000Aaid\000";
    static const int32_t values[] = {
        CSNPDeviceID_Type_Idfa,
        CSNPDeviceID_Type_Aaid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CSNPDeviceID_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CSNPDeviceID_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CSNPDeviceID_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case CSNPDeviceID_Type_Idfa:
    case CSNPDeviceID_Type_Aaid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CSNPSimpleStat

@implementation CSNPSimpleStat

@dynamic min;
@dynamic max;
@dynamic mean;

typedef struct CSNPSimpleStat__storage_ {
  uint32_t _has_storage_[1];
  double min;
  double max;
  double mean;
} CSNPSimpleStat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "min",
        .dataTypeSpecific.className = NULL,
        .number = CSNPSimpleStat_FieldNumber_Min,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPSimpleStat__storage_, min),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = NULL,
        .number = CSNPSimpleStat_FieldNumber_Max,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPSimpleStat__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "mean",
        .dataTypeSpecific.className = NULL,
        .number = CSNPSimpleStat_FieldNumber_Mean,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPSimpleStat__storage_, mean),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPSimpleStat class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPSimpleStat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdVisibility

@implementation CSNPAdVisibility

@dynamic requestId;
@dynamic adId;
@dynamic componentId;
@dynamic epochOffset;
@dynamic duration;
@dynamic hasComponentVisibility, componentVisibility;
@dynamic hasScreenVisibility, screenVisibility;

typedef struct CSNPAdVisibility__storage_ {
  uint32_t _has_storage_[1];
  CSNPSimpleStat *componentVisibility;
  CSNPSimpleStat *screenVisibility;
  uint64_t requestId;
  uint64_t adId;
  uint64_t componentId;
  uint64_t epochOffset;
  uint64_t duration;
} CSNPAdVisibility__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdVisibility_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdVisibility__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdVisibility_FieldNumber_AdId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdVisibility__storage_, adId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdVisibility_FieldNumber_ComponentId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPAdVisibility__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "epochOffset",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdVisibility_FieldNumber_EpochOffset,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPAdVisibility__storage_, epochOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdVisibility_FieldNumber_Duration,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CSNPAdVisibility__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "componentVisibility",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPSimpleStat),
        .number = CSNPAdVisibility_FieldNumber_ComponentVisibility,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CSNPAdVisibility__storage_, componentVisibility),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "screenVisibility",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPSimpleStat),
        .number = CSNPAdVisibility_FieldNumber_ScreenVisibility,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CSNPAdVisibility__storage_, screenVisibility),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdVisibility class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdVisibility__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdInteraction

@implementation CSNPAdInteraction

@dynamic requestId;
@dynamic adId;
@dynamic componentId;
@dynamic duration;
@dynamic epochOffset;
@dynamic kind;

typedef struct CSNPAdInteraction__storage_ {
  uint32_t _has_storage_[1];
  CSNPAdInteractionKind kind;
  uint64_t requestId;
  uint64_t adId;
  uint64_t componentId;
  uint64_t duration;
  uint64_t epochOffset;
} CSNPAdInteraction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdInteraction_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdInteraction__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdInteraction_FieldNumber_AdId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdInteraction__storage_, adId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdInteraction_FieldNumber_ComponentId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPAdInteraction__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdInteraction_FieldNumber_Duration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPAdInteraction__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "epochOffset",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdInteraction_FieldNumber_EpochOffset,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CSNPAdInteraction__storage_, epochOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = CSNPAdInteractionKind_EnumDescriptor,
        .number = CSNPAdInteraction_FieldNumber_Kind,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CSNPAdInteraction__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdInteraction class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdInteraction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CSNPAdInteraction_Kind_RawValue(CSNPAdInteraction *message) {
  GPBDescriptor *descriptor = [CSNPAdInteraction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPAdInteraction_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetCSNPAdInteraction_Kind_RawValue(CSNPAdInteraction *message, int32_t value) {
  GPBDescriptor *descriptor = [CSNPAdInteraction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPAdInteraction_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CSNPAdReport

@implementation CSNPAdReport

@dynamic adUnit;
@dynamic hasDeviceId, deviceId;
@dynamic timezone;
@dynamic epoch;
@dynamic adVisibiltyArray, adVisibiltyArray_Count;
@dynamic adInteractionsArray, adInteractionsArray_Count;

typedef struct CSNPAdReport__storage_ {
  uint32_t _has_storage_[1];
  NSString *adUnit;
  CSNPDeviceID *deviceId;
  NSString *timezone;
  NSMutableArray *adVisibiltyArray;
  NSMutableArray *adInteractionsArray;
  uint64_t epoch;
} CSNPAdReport__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adUnit",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReport_FieldNumber_AdUnit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, adUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPDeviceID),
        .number = CSNPAdReport_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timezone",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReport_FieldNumber_Timezone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, timezone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "epoch",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReport_FieldNumber_Epoch,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, epoch),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adVisibiltyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPAdVisibility),
        .number = CSNPAdReport_FieldNumber_AdVisibiltyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, adVisibiltyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adInteractionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPAdInteraction),
        .number = CSNPAdReport_FieldNumber_AdInteractionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, adInteractionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdReport class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdReport__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
