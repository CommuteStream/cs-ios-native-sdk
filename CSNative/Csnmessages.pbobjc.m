// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csnmessages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Csnmessages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CSNPCsnmessagesRoot

@implementation CSNPCsnmessagesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CSNPCsnmessagesRoot_FileDescriptor

static GPBFileDescriptor *CSNPCsnmessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                 objcPrefix:@"CSNP"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum CSNPHeroKind

GPBEnumDescriptor *CSNPHeroKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Image\000Html\000";
    static const int32_t values[] = {
        CSNPHeroKind_Image,
        CSNPHeroKind_Html,
    };
    static const char *extraTextFormatInfo = "\001\000\005\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CSNPHeroKind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CSNPHeroKind_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CSNPHeroKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case CSNPHeroKind_Image:
    case CSNPHeroKind_Html:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CSNPActionKind

GPBEnumDescriptor *CSNPActionKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "URL\000";
    static const int32_t values[] = {
        CSNPActionKind_URL,
    };
    static const char *extraTextFormatInfo = "\001\000\001!!\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CSNPActionKind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CSNPActionKind_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CSNPActionKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case CSNPActionKind_URL:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CSNPComponentInteractionKind

GPBEnumDescriptor *CSNPComponentInteractionKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Tap\000";
    static const int32_t values[] = {
        CSNPComponentInteractionKind_Tap,
    };
    static const char *extraTextFormatInfo = "\001\000\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CSNPComponentInteractionKind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CSNPComponentInteractionKind_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CSNPComponentInteractionKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case CSNPComponentInteractionKind_Tap:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CSNPTransitAgency

@implementation CSNPTransitAgency

@dynamic agencyId;

typedef struct CSNPTransitAgency__storage_ {
  uint32_t _has_storage_[1];
  NSString *agencyId;
} CSNPTransitAgency__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agencyId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPTransitAgency_FieldNumber_AgencyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPTransitAgency__storage_, agencyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPTransitAgency class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPTransitAgency__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPTransitRoute

@implementation CSNPTransitRoute

@dynamic agencyId;
@dynamic routeId;

typedef struct CSNPTransitRoute__storage_ {
  uint32_t _has_storage_[1];
  NSString *agencyId;
  NSString *routeId;
} CSNPTransitRoute__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agencyId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPTransitRoute_FieldNumber_AgencyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPTransitRoute__storage_, agencyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routeId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPTransitRoute_FieldNumber_RouteId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPTransitRoute__storage_, routeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPTransitRoute class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPTransitRoute__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPTransitStop

@implementation CSNPTransitStop

@dynamic agencyId;
@dynamic routeId;
@dynamic stopId;

typedef struct CSNPTransitStop__storage_ {
  uint32_t _has_storage_[1];
  NSString *agencyId;
  NSString *routeId;
  NSString *stopId;
} CSNPTransitStop__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agencyId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPTransitStop_FieldNumber_AgencyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPTransitStop__storage_, agencyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routeId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPTransitStop_FieldNumber_RouteId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPTransitStop__storage_, routeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stopId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPTransitStop_FieldNumber_StopId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPTransitStop__storage_, stopId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPTransitStop class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPTransitStop__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPLocation

@implementation CSNPLocation

@dynamic lat;
@dynamic lon;

typedef struct CSNPLocation__storage_ {
  uint32_t _has_storage_[1];
  double lat;
  double lon;
} CSNPLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLocation_FieldNumber_Lat,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPLocation__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lon",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLocation_FieldNumber_Lon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPLocation__storage_, lon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPLocation class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPLocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPLocationComponent

@implementation CSNPLocationComponent

@dynamic componentId;
@dynamic hasLocation, location;
@dynamic name;
@dynamic address;

typedef struct CSNPLocationComponent__storage_ {
  uint32_t _has_storage_[1];
  CSNPLocation *location;
  NSString *name;
  NSString *address;
  uint64_t componentId;
} CSNPLocationComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLocationComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPLocationComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPLocation),
        .number = CSNPLocationComponent_FieldNumber_Location,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPLocationComponent__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLocationComponent_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPLocationComponent__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLocationComponent_FieldNumber_Address,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPLocationComponent__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPLocationComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPLocationComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPHeroComponent

@implementation CSNPHeroComponent

@dynamic componentId;
@dynamic kind;
@dynamic blob;
@dynamic interactive;

typedef struct CSNPHeroComponent__storage_ {
  uint32_t _has_storage_[1];
  CSNPHeroKind kind;
  NSData *blob;
  uint64_t componentId;
} CSNPHeroComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPHeroComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPHeroComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = CSNPHeroKind_EnumDescriptor,
        .number = CSNPHeroComponent_FieldNumber_Kind,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPHeroComponent__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "blob",
        .dataTypeSpecific.className = NULL,
        .number = CSNPHeroComponent_FieldNumber_Blob,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPHeroComponent__storage_, blob),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "interactive",
        .dataTypeSpecific.className = NULL,
        .number = CSNPHeroComponent_FieldNumber_Interactive,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPHeroComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPHeroComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CSNPHeroComponent_Kind_RawValue(CSNPHeroComponent *message) {
  GPBDescriptor *descriptor = [CSNPHeroComponent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPHeroComponent_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetCSNPHeroComponent_Kind_RawValue(CSNPHeroComponent *message, int32_t value) {
  GPBDescriptor *descriptor = [CSNPHeroComponent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPHeroComponent_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CSNPActionComponent

@implementation CSNPActionComponent

@dynamic componentId;
@dynamic kind;
@dynamic URL;
@dynamic title;
@dynamic hasColors, colors;

typedef struct CSNPActionComponent__storage_ {
  uint32_t _has_storage_[1];
  CSNPActionKind kind;
  NSString *URL;
  NSString *title;
  CSNPColors *colors;
  uint64_t componentId;
} CSNPActionComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPActionComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPActionComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = CSNPActionKind_EnumDescriptor,
        .number = CSNPActionComponent_FieldNumber_Kind,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPActionComponent__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = CSNPActionComponent_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPActionComponent__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = CSNPActionComponent_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPActionComponent__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "colors",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPColors),
        .number = CSNPActionComponent_FieldNumber_Colors,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CSNPActionComponent__storage_, colors),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPActionComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPActionComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CSNPActionComponent_Kind_RawValue(CSNPActionComponent *message) {
  GPBDescriptor *descriptor = [CSNPActionComponent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPActionComponent_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetCSNPActionComponent_Kind_RawValue(CSNPActionComponent *message, int32_t value) {
  GPBDescriptor *descriptor = [CSNPActionComponent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPActionComponent_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CSNPLogoComponent

@implementation CSNPLogoComponent

@dynamic componentId;
@dynamic image;

typedef struct CSNPLogoComponent__storage_ {
  uint32_t _has_storage_[1];
  NSData *image;
  uint64_t componentId;
} CSNPLogoComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLogoComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPLogoComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = CSNPLogoComponent_FieldNumber_Image,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPLogoComponent__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPLogoComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPLogoComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPHeadlineComponent

@implementation CSNPHeadlineComponent

@dynamic componentId;
@dynamic headline;

typedef struct CSNPHeadlineComponent__storage_ {
  uint32_t _has_storage_[1];
  NSString *headline;
  uint64_t componentId;
} CSNPHeadlineComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPHeadlineComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPHeadlineComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "headline",
        .dataTypeSpecific.className = NULL,
        .number = CSNPHeadlineComponent_FieldNumber_Headline,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPHeadlineComponent__storage_, headline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPHeadlineComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPHeadlineComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPBodyComponent

@implementation CSNPBodyComponent

@dynamic componentId;
@dynamic body;

typedef struct CSNPBodyComponent__storage_ {
  uint32_t _has_storage_[1];
  NSString *body;
  uint64_t componentId;
} CSNPBodyComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPBodyComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPBodyComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = CSNPBodyComponent_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPBodyComponent__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPBodyComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPBodyComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdvertiserComponent

@implementation CSNPAdvertiserComponent

@dynamic componentId;
@dynamic advertiser;

typedef struct CSNPAdvertiserComponent__storage_ {
  uint32_t _has_storage_[1];
  NSString *advertiser;
  uint64_t componentId;
} CSNPAdvertiserComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdvertiserComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdvertiserComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "advertiser",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdvertiserComponent_FieldNumber_Advertiser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdvertiserComponent__storage_, advertiser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdvertiserComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdvertiserComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPColor

@implementation CSNPColor

@dynamic red;
@dynamic green;
@dynamic blue;

typedef struct CSNPColor__storage_ {
  uint32_t _has_storage_[1];
  uint32_t red;
  uint32_t green;
  uint32_t blue;
} CSNPColor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "red",
        .dataTypeSpecific.className = NULL,
        .number = CSNPColor_FieldNumber_Red,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPColor__storage_, red),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "green",
        .dataTypeSpecific.className = NULL,
        .number = CSNPColor_FieldNumber_Green,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPColor__storage_, green),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "blue",
        .dataTypeSpecific.className = NULL,
        .number = CSNPColor_FieldNumber_Blue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPColor__storage_, blue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPColor class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPColor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPColors

@implementation CSNPColors

@dynamic hasBackground, background;
@dynamic hasForeground, foreground;

typedef struct CSNPColors__storage_ {
  uint32_t _has_storage_[1];
  CSNPColor *background;
  CSNPColor *foreground;
} CSNPColors__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "background",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPColor),
        .number = CSNPColors_FieldNumber_Background,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPColors__storage_, background),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "foreground",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPColor),
        .number = CSNPColors_FieldNumber_Foreground,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPColors__storage_, foreground),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPColors class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPColors__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPSecondaryActionComponent

@implementation CSNPSecondaryActionComponent

@dynamic componentId;
@dynamic title;
@dynamic subtitle;

typedef struct CSNPSecondaryActionComponent__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *subtitle;
  uint64_t componentId;
} CSNPSecondaryActionComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPSecondaryActionComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPSecondaryActionComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = CSNPSecondaryActionComponent_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPSecondaryActionComponent__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subtitle",
        .dataTypeSpecific.className = NULL,
        .number = CSNPSecondaryActionComponent_FieldNumber_Subtitle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPSecondaryActionComponent__storage_, subtitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPSecondaryActionComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPSecondaryActionComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPViewComponent

@implementation CSNPViewComponent

@dynamic componentId;

typedef struct CSNPViewComponent__storage_ {
  uint32_t _has_storage_[1];
  uint64_t componentId;
} CSNPViewComponent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPViewComponent_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPViewComponent__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPViewComponent class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPViewComponent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPNativeAd

@implementation CSNPNativeAd

@dynamic requestId;
@dynamic adId;
@dynamic versionId;
@dynamic hasColors, colors;
@dynamic actionsArray, actionsArray_Count;
@dynamic hasView, view;
@dynamic hasSecondaryActionScreen, secondaryActionScreen;
@dynamic hasLogo, logo;
@dynamic hasHeadline, headline;
@dynamic hasBody, body;
@dynamic hasAdvertiser, advertiser;
@dynamic hasLocation, location;
@dynamic hasHero, hero;

typedef struct CSNPNativeAd__storage_ {
  uint32_t _has_storage_[1];
  CSNPColors *colors;
  NSMutableArray *actionsArray;
  CSNPViewComponent *view;
  CSNPSecondaryActionComponent *secondaryActionScreen;
  CSNPLogoComponent *logo;
  CSNPHeadlineComponent *headline;
  CSNPBodyComponent *body;
  CSNPAdvertiserComponent *advertiser;
  CSNPLocationComponent *location;
  CSNPHeroComponent *hero;
  uint64_t requestId;
  uint64_t adId;
  uint64_t versionId;
} CSNPNativeAd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPNativeAd_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPNativeAd_FieldNumber_AdId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, adId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "versionId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPNativeAd_FieldNumber_VersionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, versionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "colors",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPColors),
        .number = CSNPNativeAd_FieldNumber_Colors,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, colors),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPActionComponent),
        .number = CSNPNativeAd_FieldNumber_ActionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, actionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPViewComponent),
        .number = CSNPNativeAd_FieldNumber_View,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryActionScreen",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPSecondaryActionComponent),
        .number = CSNPNativeAd_FieldNumber_SecondaryActionScreen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, secondaryActionScreen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "logo",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPLogoComponent),
        .number = CSNPNativeAd_FieldNumber_Logo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, logo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "headline",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPHeadlineComponent),
        .number = CSNPNativeAd_FieldNumber_Headline,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, headline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPBodyComponent),
        .number = CSNPNativeAd_FieldNumber_Body,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "advertiser",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPAdvertiserComponent),
        .number = CSNPNativeAd_FieldNumber_Advertiser,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, advertiser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPLocationComponent),
        .number = CSNPNativeAd_FieldNumber_Location,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hero",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPHeroComponent),
        .number = CSNPNativeAd_FieldNumber_Hero,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(CSNPNativeAd__storage_, hero),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPNativeAd class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPNativeAd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdRequest

@implementation CSNPAdRequest

@dynamic hashId;
@dynamic numOfAds;
@dynamic locationsArray, locationsArray_Count;
@dynamic agenciesArray, agenciesArray_Count;
@dynamic routesArray, routesArray_Count;
@dynamic stopsArray, stopsArray_Count;

typedef struct CSNPAdRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t numOfAds;
  NSData *hashId;
  NSMutableArray *locationsArray;
  NSMutableArray *agenciesArray;
  NSMutableArray *routesArray;
  NSMutableArray *stopsArray;
} CSNPAdRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdRequest_FieldNumber_HashId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "numOfAds",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdRequest_FieldNumber_NumOfAds,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, numOfAds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "locationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPLocation),
        .number = CSNPAdRequest_FieldNumber_LocationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, locationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "agenciesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPTransitAgency),
        .number = CSNPAdRequest_FieldNumber_AgenciesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, agenciesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "routesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPTransitRoute),
        .number = CSNPAdRequest_FieldNumber_RoutesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, routesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stopsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPTransitStop),
        .number = CSNPAdRequest_FieldNumber_StopsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdRequest__storage_, stopsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdRequest class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdRequests

@implementation CSNPAdRequests

@dynamic adUnit;
@dynamic hasDeviceId, deviceId;
@dynamic ipAddressesArray, ipAddressesArray_Count;
@dynamic timezone;
@dynamic adRequestsArray, adRequestsArray_Count;
@dynamic sdkVersion;

typedef struct CSNPAdRequests__storage_ {
  uint32_t _has_storage_[1];
  NSData *adUnit;
  CSNPDeviceID *deviceId;
  NSMutableArray *ipAddressesArray;
  NSString *timezone;
  NSMutableArray *adRequestsArray;
  NSString *sdkVersion;
} CSNPAdRequests__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adUnit",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdRequests_FieldNumber_AdUnit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdRequests__storage_, adUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPDeviceID),
        .number = CSNPAdRequests_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdRequests__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ipAddressesArray",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdRequests_FieldNumber_IpAddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdRequests__storage_, ipAddressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timezone",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdRequests_FieldNumber_Timezone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPAdRequests__storage_, timezone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adRequestsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPAdRequest),
        .number = CSNPAdRequests_FieldNumber_AdRequestsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdRequests__storage_, adRequestsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sdkVersion",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdRequests_FieldNumber_SdkVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPAdRequests__storage_, sdkVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdRequests class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdRequests__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdResponse

@implementation CSNPAdResponse

@dynamic hashId;
@dynamic adsArray, adsArray_Count;

typedef struct CSNPAdResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *hashId;
  NSMutableArray *adsArray;
} CSNPAdResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdResponse_FieldNumber_HashId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdResponse__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "adsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPNativeAd),
        .number = CSNPAdResponse_FieldNumber_AdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdResponse__storage_, adsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdResponse class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdResponses

@implementation CSNPAdResponses

@dynamic serverId;
@dynamic adResponsesArray, adResponsesArray_Count;

typedef struct CSNPAdResponses__storage_ {
  uint32_t _has_storage_[1];
  NSString *serverId;
  NSMutableArray *adResponsesArray;
} CSNPAdResponses__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serverId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdResponses_FieldNumber_ServerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdResponses__storage_, serverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adResponsesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPAdResponse),
        .number = CSNPAdResponses_FieldNumber_AdResponsesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdResponses__storage_, adResponsesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdResponses class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdResponses__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPDeviceID

@implementation CSNPDeviceID

@dynamic deviceIdType;
@dynamic deviceId;

typedef struct CSNPDeviceID__storage_ {
  uint32_t _has_storage_[1];
  CSNPDeviceID_Type deviceIdType;
  NSData *deviceId;
} CSNPDeviceID__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceIdType",
        .dataTypeSpecific.enumDescFunc = CSNPDeviceID_Type_EnumDescriptor,
        .number = CSNPDeviceID_FieldNumber_DeviceIdType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPDeviceID__storage_, deviceIdType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPDeviceID_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPDeviceID__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPDeviceID class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPDeviceID__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CSNPDeviceID_DeviceIdType_RawValue(CSNPDeviceID *message) {
  GPBDescriptor *descriptor = [CSNPDeviceID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPDeviceID_FieldNumber_DeviceIdType];
  return GPBGetMessageInt32Field(message, field);
}

void SetCSNPDeviceID_DeviceIdType_RawValue(CSNPDeviceID *message, int32_t value) {
  GPBDescriptor *descriptor = [CSNPDeviceID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPDeviceID_FieldNumber_DeviceIdType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CSNPDeviceID_Type

GPBEnumDescriptor *CSNPDeviceID_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Idfa\000Aaid\000";
    static const int32_t values[] = {
        CSNPDeviceID_Type_Idfa,
        CSNPDeviceID_Type_Aaid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CSNPDeviceID_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CSNPDeviceID_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CSNPDeviceID_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case CSNPDeviceID_Type_Idfa:
    case CSNPDeviceID_Type_Aaid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CSNPComponentInteraction

@implementation CSNPComponentInteraction

@dynamic deviceTime;
@dynamic kind;

typedef struct CSNPComponentInteraction__storage_ {
  uint32_t _has_storage_[1];
  CSNPComponentInteractionKind kind;
  uint64_t deviceTime;
} CSNPComponentInteraction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceTime",
        .dataTypeSpecific.className = NULL,
        .number = CSNPComponentInteraction_FieldNumber_DeviceTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPComponentInteraction__storage_, deviceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = CSNPComponentInteractionKind_EnumDescriptor,
        .number = CSNPComponentInteraction_FieldNumber_Kind,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPComponentInteraction__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPComponentInteraction class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPComponentInteraction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CSNPComponentInteraction_Kind_RawValue(CSNPComponentInteraction *message) {
  GPBDescriptor *descriptor = [CSNPComponentInteraction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPComponentInteraction_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetCSNPComponentInteraction_Kind_RawValue(CSNPComponentInteraction *message, int32_t value) {
  GPBDescriptor *descriptor = [CSNPComponentInteraction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSNPComponentInteraction_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CSNPComponentReport

@implementation CSNPComponentReport

@dynamic componentId;
@dynamic visibilityEpoch;
@dynamic visibilitySampleCount;
@dynamic viewVisibilitySamplesArray, viewVisibilitySamplesArray_Count;
@dynamic deviceVisibilitySamplesArray, deviceVisibilitySamplesArray_Count;
@dynamic interactionsArray, interactionsArray_Count;

typedef struct CSNPComponentReport__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *viewVisibilitySamplesArray;
  GPBUInt64Array *deviceVisibilitySamplesArray;
  NSMutableArray *interactionsArray;
  uint64_t componentId;
  uint64_t visibilityEpoch;
  uint64_t visibilitySampleCount;
} CSNPComponentReport__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "componentId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPComponentReport_FieldNumber_ComponentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPComponentReport__storage_, componentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visibilityEpoch",
        .dataTypeSpecific.className = NULL,
        .number = CSNPComponentReport_FieldNumber_VisibilityEpoch,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPComponentReport__storage_, visibilityEpoch),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visibilitySampleCount",
        .dataTypeSpecific.className = NULL,
        .number = CSNPComponentReport_FieldNumber_VisibilitySampleCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPComponentReport__storage_, visibilitySampleCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "viewVisibilitySamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = CSNPComponentReport_FieldNumber_ViewVisibilitySamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPComponentReport__storage_, viewVisibilitySamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "deviceVisibilitySamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = CSNPComponentReport_FieldNumber_DeviceVisibilitySamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPComponentReport__storage_, deviceVisibilitySamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "interactionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPComponentInteraction),
        .number = CSNPComponentReport_FieldNumber_InteractionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPComponentReport__storage_, interactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPComponentReport class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPComponentReport__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdImpression

@implementation CSNPAdImpression

@dynamic deviceTime;

typedef struct CSNPAdImpression__storage_ {
  uint32_t _has_storage_[1];
  uint64_t deviceTime;
} CSNPAdImpression__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceTime",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdImpression_FieldNumber_DeviceTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdImpression__storage_, deviceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdImpression class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdImpression__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdReport

@implementation CSNPAdReport

@dynamic requestId;
@dynamic adId;
@dynamic versionId;
@dynamic componentsArray, componentsArray_Count;
@dynamic impressionsArray, impressionsArray_Count;

typedef struct CSNPAdReport__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *componentsArray;
  NSMutableArray *impressionsArray;
  uint64_t requestId;
  uint64_t adId;
  uint64_t versionId;
} CSNPAdReport__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReport_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReport_FieldNumber_AdId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, adId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "versionId",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReport_FieldNumber_VersionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, versionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "componentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPComponentReport),
        .number = CSNPAdReport_FieldNumber_ComponentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, componentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "impressionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPAdImpression),
        .number = CSNPAdReport_FieldNumber_ImpressionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdReport__storage_, impressionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdReport class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdReport__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSNPAdReports

@implementation CSNPAdReports

@dynamic adUnit;
@dynamic hasDeviceId, deviceId;
@dynamic timezone;
@dynamic ipAddressesArray, ipAddressesArray_Count;
@dynamic deviceTime;
@dynamic adReportsArray, adReportsArray_Count;
@dynamic sdkVersion;

typedef struct CSNPAdReports__storage_ {
  uint32_t _has_storage_[1];
  NSData *adUnit;
  CSNPDeviceID *deviceId;
  NSString *timezone;
  NSMutableArray *ipAddressesArray;
  NSMutableArray *adReportsArray;
  NSString *sdkVersion;
  uint64_t deviceTime;
} CSNPAdReports__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adUnit",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReports_FieldNumber_AdUnit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSNPAdReports__storage_, adUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPDeviceID),
        .number = CSNPAdReports_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSNPAdReports__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timezone",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReports_FieldNumber_Timezone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSNPAdReports__storage_, timezone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ipAddressesArray",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReports_FieldNumber_IpAddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdReports__storage_, ipAddressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "deviceTime",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReports_FieldNumber_DeviceTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSNPAdReports__storage_, deviceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adReportsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSNPAdReport),
        .number = CSNPAdReports_FieldNumber_AdReportsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSNPAdReports__storage_, adReportsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sdkVersion",
        .dataTypeSpecific.className = NULL,
        .number = CSNPAdReports_FieldNumber_SdkVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CSNPAdReports__storage_, sdkVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSNPAdReports class]
                                     rootClass:[CSNPCsnmessagesRoot class]
                                          file:CSNPCsnmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSNPAdReports__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
